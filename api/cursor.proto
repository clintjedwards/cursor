syntax = "proto3";

package api;

// Pipeline represents a collection of tasks that acheieve a certain end goal
message Pipeline {
  // id refers to a unique ID for pipelines
  string id = 1;
  // name refers to a human readable pipeline name
  string name = 2;
  // description of pipeline's purpose and other details
  string description = 3;
  // repository_url is the URL where the code to be compiled is located.
  // able to download from most common sources. (eg: git, http, mercurial)
  // See (https://github.com/hashicorp/go-getter#url-format) for more
  // information on how to form input
  string repository_url = 4;
  // created time in epoch
  int64 created = 5;
  // modified time in epoch
  int64 modified = 6;
  // last_compiled shows the last time cursor has pulled and compiled a
  // new binary for this pipeline
  int64 last_compiled = 7;
  // The default task ran when a pipeline run rpc is called without defining one
  string root_task_id = 8;
  // tasks is a map for quickly finding pipeline tasks and assists with graph
  // generation
  map<string, Task> tasks = 9;
  // pipeline_runs is an ordered list of all pipeline run ids
  repeated string pipeline_runs = 10;
}

// PipelineRun represents a single invocation of a pipeline
message PipelineRun {
  // id is a unique ID for pipeline runs
  string id = 1;
  // start time for run in epoch
  int64 start = 2;
  // end time for run in epoch
  int64 end = 3;
  enum Status {
    UNKNOWN = 0;
    READY = 1;
    RUNNING = 2;
    FAILED = 3;
  }
  // status code for run
  Status status = 4;
}

// Task is the smallest unit of work, it accomplishes a small part of an entire
// pipeline. Many tasks together make up a single pipeline.
message Task {
  string name = 1;
  string description = 2;
  repeated string children = 3;
}

// TaskRun represents a single run of a task
// message TaskRun {
//    string id = 1;
//    string pipeline_run_id = 2;
//    int64 start = 3;          // Start time of run in epoch
//    int64 end = 4;            // End time of run in epoch
//    enum Status {
//        UNKNOWN = 0;
//        READY = 1;
//        RUNNING = 2;
//        FAILED = 3;
//    }
//    Status status = 5;        // Status code of run
//}

service CursorMaster {
  rpc GetPipeline(GetPipelineRequest) returns (GetPipelineResponse);
  rpc ListPipelines(ListPipelinesRequest) returns (ListPipelinesResponse);
  rpc CreatePipeline(CreatePipelineRequest) returns (CreatePipelineResponse);
  rpc RunPipeline(RunPipelineRequest) returns (RunPipelineResponse);
  rpc DeletePipeline(DeletePipelineRequest) returns (DeletePipelineResponse);

  rpc GetPipelineRun(GetPipelineRunRequest) returns (GetPipelineRunResponse);
}

message GetPipelineRequest {
  string id = 1;
}
message GetPipelineResponse {
  Pipeline pipeline = 1;
}

message ListPipelinesRequest {
}
message ListPipelinesResponse {
  map<string, Pipeline> pipelines = 1;
}

message CreatePipelineRequest {
  // name is a human readable pipeline name
  string name = 1;
  // description of pipeline's purpose and other details
  string description = 2;
  // repository_url is the URL where the code to be compiled is located.
  // able to download from most common sources. (eg: git, http, mercurial)
  // See (https://github.com/hashicorp/go-getter#url-format) for more
  // information on how to form input
  string repository_url = 3;
}

message CreatePipelineResponse {
  string id = 1;
}

message RunPipelineRequest {
  string id = 1;
  // A specific task to run other than the default. If this is empty the root
  // task defined in pipeline will be run.
  string task_id = 2;
  // run_single_task controls if cursor will attempt to run the chain of tasks
  // after the original task has been run. (cursor will attempt to run task
  // children). Setting this to true will cause cursor to stop running tasks at
  // the task given (or the default pipeline task)
  bool run_single_task = 3;
}

message RunPipelineResponse {
}

message DeletePipelineRequest {
  string id = 1;
}

message DeletePipelineResponse {
}

message GetPipelineRunRequest {
  // pipeline_id refers to the id of a particular pipeline
  string pipeline_id = 1;
  // id refers to a specific pipeline run
  string id = 2;
}

message GetPipelineRunResponse {
  PipelineRun pipeline_run = 1;
}
