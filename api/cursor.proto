syntax = "proto3";

package api;

// Pipeline represents a collection of tasks that acheieve a certain end goal
message Pipeline {
  string id = 1;           // Unique ID for pipeline
  string name = 2;         // Human readable pipeline name
  string description = 3;  // Short description of pipeline's purpose
  // repository_url is the URL where the code to be compiled is located
  // it should be able to download from most common sources. (eg: git, http,
  // mercurial )
  // See (https://github.com/hashicorp/go-getter#url-format) for more
  // information on how to form input
  string repository_url = 4;
  int64 created = 5;        // Time created in epoch
  int64 modified = 6;       // Time last modified in epoch
  int64 last_compiled = 7;  // Shows when last cursor has pulled and compiled a
                            // new binary for this pipeline
  string root_task_id = 8;  // The default task ran when a pipeline run rpc is
                            // called without defining one
  map<string, Task> tasks =
      9;  // A map of tasks for quick finding and graph generation
  repeated string pipeline_runs =
      10;  // An ordered list of all pipeline run ids
}

// PipelineRun represents a single invocation of a pipeline
message PipelineRun {
  string id = 1;    // Unique Pipeline run ID
  int64 start = 2;  // Start time of run in epoch
  int64 end = 3;    // End time of run in epoch
  enum Status {
    UNKNOWN = 0;
    READY = 1;
    RUNNING = 2;
    FAILED = 3;
  }
  Status status = 4;  // Status code of run
}

// Task is the smallest unit of work. A task accomplishes some hyper specific
// thing.
// Many tasks together make up a single pipeline
message Task {
  string id = 1;
  string name = 2;
  string description = 3;
  repeated string children = 4;
}

// TaskRun represents a single run of a task
// message TaskRun {
//    string id = 1;
//    string pipeline_run_id = 2;
//    int64 start = 3;          // Start time of run in epoch
//    int64 end = 4;            // End time of run in epoch
//    enum Status {
//        UNKNOWN = 0;
//        READY = 1;
//        RUNNING = 2;
//        FAILED = 3;
//    }
//    Status status = 5;        // Status code of run
//}

service CursorMaster {
  rpc GetPipeline(GetPipelineRequest) returns (GetPipelineResponse) {
  }
  rpc ListPipelines(ListPipelinesRequest) returns (ListPipelinesResponse) {
  }
  rpc CreatePipeline(CreatePipelineRequest) returns (CreatePipelineResponse) {
  }
  rpc RunPipeline(RunPipelineRequest) returns (RunPipelineResponse) {
  }
  rpc DeletePipeline(DeletePipelineRequest) returns (DeletePipelineResponse) {
  }

  rpc GetPipelineRun(GetPipelineRunRequest) returns (GetPipelineRunResponse) {
  }
}

message GetPipelineRequest {
  string id = 1;
}
message GetPipelineResponse {
  Pipeline pipeline = 1;
}

message ListPipelinesRequest {
}
message ListPipelinesResponse {
  map<string, Pipeline> pipelines = 1;
}

message CreatePipelineRequest {
  string name = 1;         // Human readable pipeline name
  string description = 2;  // Short description of what pipeline is used for
  // repository_url is the URL where the code to be compiled is located
  // it should be able to download from most common sources. (eg: git, http,
  // mercurial)
  // See (https://github.com/hashicorp/go-getter#url-format) for more
  // information on how to form input
  string repository_url = 3;
}

message CreatePipelineResponse {
  string id = 1;  // Unique id for pipeline
}

message RunPipelineRequest {
  string id = 1;
  // A specific task to run other than the default. If this is empty the root
  // task defined in pipeline will be run.
  string task_id = 2;
  // Run the entire graph of tasks. If this is set to false, cursor will not
  // execute the children of the job to be ran.
  bool execute_chain = 3;
}

message RunPipelineResponse {
}

message DeletePipelineRequest {
  string id = 1;
}

message DeletePipelineResponse {
}

message GetPipelineRunRequest {
  string pipeline_id = 1;  // The ID of the particular pipeline
  string id = 2;  // The ID of the pipeline run within a certain pipeline
}

message GetPipelineRunResponse {
  PipelineRun pipeline_run = 1;
}
