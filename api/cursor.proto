syntax = "proto3";

package api;

message Pipeline {
    string id = 1;                 // Unique ID for pipeline
    string name = 2;               // Human readable pipeline name
    string description = 3;        // Short description of pipeline's purpose
    int64 created = 4;             // Time created in epoch
    int64 modified = 5;            // Time last modified in epoch
    // repository_url is the URL where the code to be compiled is located
    // it should be able to download from most common sources. (eg: git, http, mercurial )
    // See (https://github.com/hashicorp/go-getter#url-format) for more information on how to form input
    string repository_url = 6;
    repeated PipelineRun runs = 7; // A record of the last x number of runs attempted
}

message PipelineRun {
    string id = 1;       // Unique Pipeline run ID
    int64 start = 2;     // Start time of run in epoch
    int64 end = 3;       // End time of run in epoch
    enum Status {
        UNKNOWN = 0;
        READY = 1;
        RUNNING = 2;
        FAILED = 3;
    }
    Status status = 4;        // Status code of run
    repeated string logs = 5; // Logs of run
}

message Task {
    string name = 1;
    string description = 2;
    enum TaskStatus {
        UNKNOWN = 0;
        FAILED = 1;
        SUCCESS = 2;
        RUNNING = 3;
        WAITING = 4;
    }
    TaskStatus task_status = 3;
    repeated string depends_on = 4;
}

message TaskRun {
    string id = 1;
    string pipeline_run_id = 2;
    int64 start = 3;     // Start time of run in epoch
    int64 end = 4;       // End time of run in epoch
    enum Status {
        UNKNOWN = 0;
        READY = 1;
        RUNNING = 2;
        FAILED = 3;
    }
    Status status = 5;        // Status code of run
    repeated string logs = 6; // Logs of run
}

service CursorMaster {
    rpc GetPipeline(GetPipelineRequest) returns (GetPipelineResponse) {}
    rpc ListPipelines(ListPipelinesRequest) returns (ListPipelinesResponse) {}
    rpc CreatePipeline(CreatePipelineRequest) returns (CreatePipelineResponse) {}
    rpc DeletePipeline(DeletePipelineRequest) returns (DeletePipelineResponse) {}
    rpc RegisterWorker(RegisterWorkerRequest) returns (RegisterWorkerResponse) {}
}

message CreatePipelineRequest {
    string name = 1;        // Human readable pipeline name
    string description = 2; // Short description of what pipeline is used for
    // repository_url is the URL where the code to be compiled is located
    // it should be able to download from most common sources. (eg: git, http, mercurial )
    string repository_url = 3;
}

message CreatePipelineResponse {
    string id = 1; // Unique id for pipeline
}

message GetPipelineRequest {
    string id = 1;
}
message GetPipelineResponse {
    Pipeline pipeline = 1;
}

message ListPipelinesRequest {}
message ListPipelinesResponse {
    map<string, Pipeline> pipelines = 1;
}

message DeletePipelineRequest {
    string id = 1;
}
message DeletePipelineResponse {}

message RegisterWorkerRequest {}
message RegisterWorkerResponse {}
